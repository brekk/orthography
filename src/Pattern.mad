// delimiter, formatA, formatZ
import type { Maybe } from "Maybe"

import { always, ifElse } from "Function"
import { isEmpty } from "List"
import { Just, Nothing } from "Maybe"
import String from "String"

import { helper } from "@/Convert"
import { capitalize } from "@/String"



export type Fission
  = Fission(
    // delimiter
    String,
    // breaker
    String -> String -> List String,
  )

export type Fusion
  = Fusion(
    // delimiter
    String,
    // format a
    String -> String,
    // format z
    String -> String,
  )

/*
Normal Form is List String:
["alpha", "Beta", "Gamma"]

A Fusion can convert NormalForm to a String
A Fission can convert a String to a NormalForm
*/

destructure :: Fission -> String -> List String
export destructure = (prtn, str) => where(prtn) {
  Fission(delim, breaker) =>
    breaker(delim, str)
}

structure :: Fusion -> List String -> String
export structure = (ptrn, strs) => where(#[ptrn, strs]) {
  #[Fusion(delim, formatA, formatZ), [a, ...z]] =>
    pipe(
      ifElse(
        isEmpty,
        always(""),
        pipe(
          map(formatZ),
          String.join(delim),
          mappend(delim),
        ),
      ),
      mappend(formatA(a)),
    )(z)

  #[_, []] =>
    ""
}
