import { identity } from "Function"
import { always, ifElse } from "Function"
import List from "List"
import { join, toLower, toUpper } from "String"

import PB from "PartyBus"

import { capitalize } from "@/String"



export type Fusion
  = Fusion(
    // name
    String,
    // delimiter
    String,
    // format a
    String -> String,
    // format z
    String -> String,
  )

structure :: Fusion -> List String -> String
export structure = (ptrn, strs) => where(#[ptrn, strs]) {
  #[Fusion(name, delim, formatA, formatZ), [a, ...z]] =>
    do {
      tag = PB.tagWithScope("ortho", ["join", name])
      return pipe(
        PB.env(tag, "input"),
        ifElse(
          List.isEmpty,
          always(""),
          pipe(
            map(formatZ),
            join(delim),
            mappend(delim),
          ),
        ),
        mappend(formatA(a)),
        PB.env(tag, "output"),
      )(z)
    }

  #[_, []] =>
    ""
}
// ▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚ FUSION PATTERNS


export camel = Fusion(
  "camel",
  "",
  toLower,
  pipe(
    toLower,
    capitalize,
  ),
)

export sentence = Fusion("sentence", " ", capitalize, toLower)

_apply = (name, delim, fn) => Fusion(name, delim, fn, fn)

export snake = _apply("snake", "_", toLower)
export constant = _apply("constant", "_", toUpper)

_joint = _apply($, $, identity)
_jointCaps = _apply($, $, capitalize)

export space = _joint("space", " ")
export dot = _joint("dot", ".")
export kebab = _joint("kebab", "-")
export path = _joint("path", "/")

export capital = _jointCaps("capital", " ")
export pascal = _jointCaps("pascal", "")
export pascalSnake = _jointCaps("pascalSnake", "_")
export train = _jointCaps("train", "-")
