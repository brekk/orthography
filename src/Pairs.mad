import type { Fusion } from "@/Joiners"
import type { Fission } from "@/Splitters"

import { complement, equals } from "Function"

import PB from "PartyBus"

import J from "@/Joiners"
import { TAGS, log } from "@/Log"
import S from "@/Splitters"



// export type ReversiblePair = Reversible | Irreversible
export type Pair = Pair(Fission, Fusion)
export type Reversible = Reversible(Pair, Pair)

export bidi = Reversible

export camel = Pair(S.camel, J.camel)
export constant = Pair(S.constant, J.constant)
export dot = Pair(S.dot, J.dot)
export kebab = Pair(S.kebab, J.kebab)
export pascal = Pair(S.pascal, J.pascal)
export pascalSnake = Pair(S.pascalSnake, J.pascalSnake)
export path = Pair(S.path, J.path)
export sentence = Pair(S.sentence, J.sentence)
export snake = Pair(S.snake, J.snake)
export space = Pair(S.space, J.space)
export train = Pair(S.train, J.train)

validInput :: Pair -> String -> Boolean
export validInput = (p, x) => where(p) {
  Pair(split, join) =>
    pipe(
      S.destructure(split),
      J.structure(join),
      PB.bus(PB.confChange((y) => #[x, y], PB.DATED_CONFIG), TAGS.pairsValidate, "validInput"),
      complement(equals(x)),
    )(x)
}

validate :: Reversible -> String -> Boolean
export validate = (rev, x) => where(rev) {
  Reversible(Pair(split, join), Pair(split2, join2)) =>
    where(#[split, join, split2, join2]) {
      #[
        S.Fission(splitName, _, _),
        J.Fusion(joinName, _, _, _),
        S.Fission(split2Name, _, _),
        J.Fusion(join2Name, _, _, _),
      ] =>
        pipe(
          S.destructure(split),
          J.structure(join2),
          S.destructure(split2),
          J.structure(join),
          equals(x),
          log.pairsValidate(`${splitName} -> ${join2Name} -> ${split2Name} -> ${joinName}`),
        )(x)
    }
}
