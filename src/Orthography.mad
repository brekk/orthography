import type { ReversiblePair } from "@/Pairs"

import { always, identity, ifElse, unless } from "Function"
import List from "List"
import String from "String"

import { Pair } from "@/Pairs"
import { capitalize, uncapitalize } from "@/String"



export capitalize
export uncapitalize

export type Translate a b = Translate(ReversiblePair a b, ReversiblePair b a)

consume :: Translate a b -> a -> b
export consume = (o, x) => where(o) {
  Translate(Pair(eat, _), _) =>
    eat(x)
}
produce :: Translate b a -> b -> a
export produce = (o, x) => where(o) {
  Translate(_, Pair(_, barf)) =>
    barf(x)
}

export convert = (o, x) => where(o) {
  Pair(eat, barf) =>
    pipe(
      eat,
      barf,
    )(x)
}

// convert :: Translate a b -> a -> a
export paired = (o, x) => where(o) {
  Translate(Pair(eat, _), Pair(_, barf)) =>
    pipe(
      eat,
      barf,
    )(x)
}
