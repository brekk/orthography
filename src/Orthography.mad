import type { Fusion } from "@/Joiners"
import type { Pair, Reversible } from "@/Pairs"
import type { Fission } from "@/Splitters"

import J from "@/Joiners"
import { Pair, Reversible } from "@/Pairs"
import S from "@/Splitters"



export type Fusion
export type Pair
export type Reversible
export type Fission


export structure = J.structure
export set = {
  camel: J.structure(J.camel),
  sentence: J.structure(J.sentence),
  snake: J.structure(J.snake),
  constant: J.structure(J.constant),
  dot: J.structure(J.dot),
  kebab: J.structure(J.kebab),
  path: J.structure(J.path),
  capital: J.structure(J.capital),
  pascal: J.structure(J.pascal),
  pascalSnake: J.structure(J.pascalSnake),
  train: J.structure(J.train),
}

export destructure = S.destructure
export get = {
  space: S.destructure(S.space),
  sentence: S.destructure(S.sentence),
  camel: S.destructure(S.camel),
  pascal: S.destructure(S.pascal),
  snake: S.destructure(S.snake),
  constant: S.destructure(S.constant),
  path: S.destructure(S.path),
  dot: S.destructure(S.dot),
  kebab: S.destructure(S.kebab),
  train: S.destructure(S.train),
}

convert :: Fission -> Fusion -> String -> String
export convert = (split, join, x) => pipe(
  destructure(split),
  structure(join),
)(x)

export alias Translation = { translateFrom :: String -> String, translateTo :: String -> String }

translate :: Reversible -> Boolean -> String -> String
export translate = (t, dir, x) => where(t) {
  Reversible(Pair(aSplit, aJoin), Pair(bSplit, bJoin)) =>
    (dir ? convert(aSplit, bJoin) : convert(bSplit, aJoin))(x)
}
