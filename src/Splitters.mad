import { reject } from "List"
import String from "String"

import PB from "PartyBus"



export type Fission
  = Fission(
    // name
    String,
    // delimiter
    String,
    // breaker
    String -> String -> List String,
  )

destructure :: Fission -> String -> List String
export destructure = (prtn, str) => where(prtn) {
  Fission(name, delim, breaker) =>
    do {
      tag = PB.tagWithScope("ortho", ["split", name])
      return pipe(
        PB.env(tag, "input"),
        breaker(delim),
        reject(String.isEmpty),
        PB.env(tag, "output"),
      )(str)
    }
}

// ▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚ FISSILE PATTERNS

_split = Fission($, $, String.split)


export space = _split("space", " ")
export sentence = _split("sentence", " ")

export splitCapitals = (d, xs) => pipe(
  String.replace("([A-Z])", `${d}$1`),
  String.trim,
  String.split(d),
)(xs)

export camel = Fission("camel", " ", splitCapitals)
export pascal = Fission("pascal", " ", splitCapitals)
export pascalSnake = Fission("pascalSnake", "_", splitCapitals)

export snake = _split("snake", "_")
export constant = _split("constant", "_")

export path = _split("path", "/")

export dot = _split("dot", ".")

export kebab = _split("kebab", "-")
export train = _split("train", "-")
